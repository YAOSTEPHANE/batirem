import {
  top,
  left,
  right,
  bottom,
  start,
} from "../enums.js";
import getBasePlacement from "../utils/getBasePlacement.js";
import getMainAxisFromPlacement from "../utils/getMainAxisFromPlacement.js";
import getAltAxis from "../utils/getAltAxis.js";
import within from "../utils/within.js";
import getLayoutRect from "../dom-utils/getLayoutRect.js";
import getOffsetParent from "../dom-utils/getOffsetParent.js";
import detectOverflow from "../utils/detectOverflow.js";
import getVariation from "../utils/getVariation.js";
import getFreshSideObject from "../utils/getFreshSideObject.js";

function preventOverflow({ state, options, name }) {
  const {
    mainAxis = true,
    altAxis = false,
    boundary = null,
    rootBoundary = null,
    altBoundary = null,
    padding = 0,
    tether = true,
    tetherOffset = 0,
  } = options;

  const overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary,
  });

  const basePlacement = getBasePlacement(state.placement);
  const variation = getVariation(state.placement);
  const isBasePlacement = !variation;
  const mainAxisName = getMainAxisFromPlacement(basePlacement);
  const altAxisName = getAltAxis(mainAxisName);
  const popperOffsets = state.modifiersData.popperOffsets;
  const referenceRect = state.rects.reference;
  const popperRect = state.rects.popper;

  const tetherOffsetValue =
    typeof tetherOffset === "function"
      ? tetherOffset(Object.assign({}, state.rects, { placement: state.placement }))
      : tetherOffset;

  const data = {
    x: 0,
    y: 0,
  };

  if (!popperOffsets) {
    return;
  }

  if (mainAxis) {
    const mainSide = mainAxisName === "y" ? top : left;
    const altSide = mainAxisName === "y" ? bottom : right;
    const lengthName = mainAxisName === "y" ? "height" : "width";
    const offset = popperOffsets[mainAxisName];
    const min = popperOffsets[mainAxisName] + overflow[mainSide];
    const max = popperOffsets[mainAxisName] - overflow[altSide];
    const additive = tether ? -popperRect[lengthName] / 2 : 0;
    const minLength = variation === start ? referenceRect[lengthName] : popperRect[lengthName];
    const maxLength = variation === start ? -popperRect[lengthName] : -referenceRect[lengthName];

    const arrowElement = state.elements.arrow;
    const arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : { width: 0, height: 0 };
    const arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    const arrowPaddingMin = arrowPaddingObject[mainSide];
    const arrowPaddingMax = arrowPaddingObject[altSide];

    const arrowLength =
      within(0, referenceRect[lengthName], arrowRect[lengthName]) || 0;

    const minOffset =
      isBasePlacement &&
      (referenceRect[lengthName] / 2 - additive - arrowLength - arrowPaddingMin - tetherOffsetValue) ||
      minLength - arrowLength - arrowPaddingMin - tetherOffsetValue;

    const maxOffset =
      isBasePlacement &&
      (
        -referenceRect[lengthName] / 2 + additive + arrowLength + arrowPaddingMax + tetherOffsetValue
      ) ||
      maxLength + arrowLength + arrowPaddingMax + tetherOffsetValue;

    const arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    const clientOffset = arrowOffsetParent ? mainAxisName === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    const offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxisName] : 0;

    const tetherMin = popperOffsets[mainAxisName] + minOffset - offsetModifierValue - clientOffset;
    const tetherMax = popperOffsets[mainAxisName] + maxOffset - offsetModifierValue;

    const preventedOffset = within(
      tether ? Math.min(min, tetherMin) : min,
      offset,
      tether ? Math.max(max, tetherMax) : max
    );

    popperOffsets[mainAxisName] = preventedOffset;
    data[mainAxisName] = preventedOffset - offset;
  }

  if (altAxis) {
    const mainSide = mainAxisName === "x" ? top : left;
    const altSide = mainAxisName === "x" ? bottom : right;
    const offset = popperOffsets[altAxisName];
    const min = offset + overflow[mainSide];
    const max = offset - overflow[altSide];
    const preventedOffset = within(min, offset, max);

    popperOffsets[altAxisName] = preventedOffset;
    data[altAxisName] = preventedOffset - offset;
  }

  state.modifiersData[name] = data;
}

export default {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"],
};
