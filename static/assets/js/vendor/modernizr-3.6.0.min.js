/*! modernizr 3.6.0 (Custom Build) | MIT */

// Helper function to check if a variable is of a certain type
function is(variable, type) {
  return typeof variable === type;
}

// Helper function to create a DOM element
function createElement(tagName, document) {
  return 'HTML' === document.documentElement.tagName ?
    document.createElement(tagName) :
    document.createElementNS('http://www.w3.org/2000/svg', tagName);
}

// Helper function to test a CSS property
function testProperty(property, value, document, prefixes) {
  // Test the property with all the given prefixes
  for (var i = 0, len = prefixes.length; i < len; i++) {
    var prefix = prefixes[i];
    var prefixedProperty = prefix ? (prefix + property) : property;

    if (is(document.body.style[prefixedProperty], 'string') ||
        null !== document.documentElement.style[prefixedProperty]) {
      return prefixedProperty;
    }
  }

  return null;
}

// Helper function to test multiple CSS properties
function testProperties(properties, values, document, prefixes) {
  for (var i = 0, len = properties.length; i < len; i++) {
    var property = properties[i];
    var prefixedProperty = testProperty(property, values[i], document, prefixes);

    if (prefixedProperty) {
      return prefixedProperty;
    }
  }

  return null;
}

// Helper function to test a CSS property and return the result
function testAllProps(property, value, document, prefixes, subProperty) {
  // Test the property with all the given prefixes
  var result = testProperties(prefixes, [property], document);

  if (!result && subProperty) {
    // Test the sub-property if the property is not supported
    result = testProperty(property, subProperty, document);
  }

  return result;
}

// Helper function to test a CSS property and return a boolean
function testStyles(property, value, document, prefixes) {
  return !!testAllProps(property, value, document, prefixes);
}

// Helper function to test a CSS property and return the prefixed property
function prefixed(property, document, prefixes) {
  return testAllProps(property, null, document, prefixes, true);
}

// Helper function to test a CSS property and return the prefixed property with the value
function prefixedCSS(property, document, prefixes) {
  var prefixedProperty = prefixed(property, document, prefixes);
  return prefixedProperty && (document.body.style[prefixedProperty] || document.documentElement.style[prefixedProperty]);
}

// Modernizr constructor
function Modernizr() {}

// Modernizr prototype
Modernizr.prototype = {
  // List of tests
  _q: [],

  // Map of test names to test functions
  _l: {},

  // Config object
  _config: {
    classPrefix: '',
    enableClasses: !0,
    enableJSClass: !0,
    usePrefixes: !0
  },

  // Add a test
  addTest: function(name, fn, options) {
    this._q.push({
      name: name,
      fn: fn,
      options: options
    });
  },

  // Add an async test
  addAsyncTest: function(fn) {
    this._q.push({
      name: null,
      fn: fn
    });
  },

  // Run the tests
  detect: function(document, prefixes) {
    // Set the document and prefixes
    this.document = document;
    this.prefixes = prefixes;

    // Run the tests
    for (var i = 0, len = this._q.length; i < len; i++) {
      var test = this._q[i];
      if ('string' === typeof test.name) {
        this[test.name] = test.fn.call(this, this);
      } else {
        test.fn.call(this, this);
      }
    }

    // Delete the tests
    delete this._q;

    // Trigger events for all passed tests
    for (var name in this) {
      if (this.hasOwnProperty(name) && 0 === name.indexOf('_')) {
        this.on(name, this[name]);
      }
    }
  },

  // Trigger an event
  on: function(name, fn) {
    if (!this._l[name]) {
      this._l[name] = [];
    }
    this._l[name].push(fn);

    if ('string' === typeof this[name]) {
      setTimeout(function() {
        fn(this[name]);
      }.bind(this), 0);
    }
  },

  // Trigger all events for a test
  _trigger: function(name, value) {
    if (this._l[name]) {
      for (var i = 0, len = this._l[name].length; i < len; i++) {
        this._l[name][i](value);
      }
      delete this._l[name];
    }
  }
};

// Create a new Modernizr instance
var modernizr = new Modernizr();

// Define the tests
modernizr.addTest('flexbox', function() {
  return testStyles('display', 'flex', this.document, this.prefixes);
});

modernizr.addTest('cssanimations', function() {
  return testStyles('animationName', 'a', this.document, this.prefixes);
});

// ... add more tests here ...

// Run the tests
modernizr.detect(document, ['Moz', 'O', 'ms', '
