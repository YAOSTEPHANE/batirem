import { getTimerItem, getItemTypesByLayout, getSecondsToDeadLine, getUnitsToDeadLine, getPeriodUnit, getDifferenceWithTimezone, format2 } from './syotimer-utils.js';

const defaultOptions = {
  year: 2034,
  month: 7,
  day: 31,
  hour: 0,
  minute: 0,
  second: 0,
  timeZone: 'local',
  ignoreTransferTime: false,
  layout: 'dhms',
  periodic: false,
  periodInterval: 7,
  periodUnit: 'd',
  doubleNumbers: true,
  effectType: 'none',
  lang: 'eng',
  headTitle: '',
  footTitle: '',
  afterDeadline: function(e) {
    e.bodyBlock.html('<p style="font-size: 1.2em;">The countdown is finished!</p>')
  }
};

const itemTypes = {
  d: 'day',
  h: 'hour',
  m: 'minute',
  s: 'second'
};

const listOrder = ['second', 'minute', 'hour', 'day'];
const nextItem = (item) => listOrder[listOrder.indexOf(item) + 1];
const prevItem = (item) => listOrder[listOrder.indexOf(item) - 1];

class SyoTimer {
  constructor(element, options) {
    this.element = element;
    this.options = Object.assign({}, defaultOptions, options);
    this.itemTypes = getItemTypesByLayout(this.options.layout);
    this._itemsHas = Object.assign({}, ...this.itemTypes.map(type => ({ [type]: true })));
    this.init();
  }

  init() {
    this.render();
    this.perSecondHandler();
  }

  render() {
    const timerItem = getTimerItem();
    const headBlock = $('<div/>', { class: 'syotimer__head' }).html(this.options.headTitle);
    const bodyBlock = $('<div/>', { class: 'syotimer__body' });
    const footBlock = $('<div/>', { class: 'syotimer__footer' }).html(this.options.footTitle);
    const items = {};

    for (let i = 0; i < this.itemTypes.length; i++) {
      const type = this.itemTypes[i];
      const item = timerItem.clone();
      item.addClass(`syotimer-cell_type_${type}`);
      bodyBlock.append(item);
      items[type] = item;
    }

    const blocks = {
      headBlock,
      bodyBlock,
      footBlock
    };

    this.element.data('syotimer-blocks', blocks).data('syotimer-items', items).addClass('syotimer')
      .append(headBlock).append(bodyBlock).append(footBlock);
  }

  perSecondHandler() {
    const element = this.element;
    const options = this.options;
    const items = element.data('syotimer-items');

    $('.syotimer-cell > .syotimer-cell__value', element).css('opacity', 1);

    const now = new Date();
    const target = new Date(options.year, options.month - 1, options.day, options.hour, options.minute, options.second);
    const diff = getDifferenceWithTimezone(now, target, options);
    const secondsToDeadline = getSecondsToDeadLine(diff, options);

    if (0 <= secondsToDeadline) {
      this.refreshUnitsDom(secondsToDeadline);
      this.applyEffectSwitch(options.effectType);
    } else {
      const blocks = element.data('syotimer-blocks');
      options.afterDeadline(blocks);
    }
  }

  refreshUnitsDom(secondsToDeadline) {
    const element = this.element;
    const options = this.options;
    const items = element.data('syotimer-items');
    const units = getUnitsToDeadLine(secondsToDeadline);

    if (!options._itemsHas.day) {
      units.hour += 24 * units.day;
      delete units.day;
    }

    if (!options._itemsHas.hour) {
      units.minute += 60 * units.hour;
      delete units.hour;
    }

    if (!options._itemsHas.minute) {
      units.second += 60 * units.minute;
      delete units
