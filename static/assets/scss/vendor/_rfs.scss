// Stylelint disable property-blacklist, scss/dollar-variable-default

// SCSS RFS mixin
// Automated responsive values for font sizes, paddings, margins and much more

// Configuration
$rfs-base-value: 1.25rem !default;
$rfs-unit: rem !default;
$rfs-breakpoint: 1200px !default;
$rfs-breakpoint-unit: px !default;
$rfs-two-dimensional: false !default;
$rfs-factor: 10 !default;
$rfs-mode: min-media-query !default;
$rfs-class: false !default;
$rfs-rem-value: 16 !default;
$rfs-safari-iframe-resize-bug-fix: false !default;
$enable-rfs: true !default;

// Cache $rfs-base-value unit
$rfs-base-value-unit: unit($rfs-base-value);

// Remove px-unit from $rfs-base-value for calculations
@if $rfs-base-value-unit == px {
  $rfs-base-value: $rfs-base-value / ($rfs-base-value * 0 + 1);
}
@else if $rfs-base-value-unit == rem {
  $rfs-base-value: $rfs-base-value / ($rfs-base-value * 0 + 1 / $rfs-rem-value);
}

// Cache $rfs-breakpoint unit to prevent multiple calls
$rfs-breakpoint-unit-cache: unit($rfs-breakpoint);

// Remove unit from $rfs-breakpoint for calculations
@if $rfs-breakpoint-unit-cache == px {
  $rfs-breakpoint: $rfs-breakpoint / ($rfs-breakpoint * 0 + 1);
}
@else if $rfs-breakpoint-unit-cache == rem or $rfs-breakpoint-unit-cache == "em" {
  $rfs-breakpoint: $rfs-breakpoint / ($rfs-breakpoint * 0 + 1 / $rfs-rem-value);
}

// Utility functions
@function rfs-value($values) {
  $values: if(type-of($values) != list, ($values,), $values);
  $val: '';

  @each $value in $values {
    @if $value == 0 {
      $val: $val + ' 0';
    }
    @else {
      $unit: if(type-of($value) == "number", unit($value), false);

      @if $unit == px {
        $val: $val + ' ' + if($rfs-unit == rem, #{$value / ($value * 0 + $rfs-rem-value)}rem, $value);
      }
      @else if $unit == rem {
        $val: $val + ' ' + if($rfs-unit == px, #{$value / ($value * 0 + 1) * $rfs-rem-value}px, $value);
      }
      @else {
        $val: $val + ' ' + $value;
      }
    }
  }

  @return unquote(str-slice($val, 2));
}

@function rfs-fluid-value($values) {
  $values: if(type-of($values) != list, ($values,), $values);
  $val: '';

  @each $value in $values {
    @if $value == 0 {
      $val: $val + ' 0';
    }
    @else {
      $unit: if(type-of($value) == "number", unit($value), false);

      @if not $unit or $unit != px and $unit != rem {
        $val: $val + ' ' + $value;
      }
      @else {
        $value: $value / ($value * 0 + if($unit == px, 1, 1 / $rfs-rem-value));

        @if abs($value) <= $rfs-base-value or not $enable-rfs {
          $val: $val + ' ' + if($rfs-unit == rem, #{$value / $rfs-rem-value}rem, #{$value}px);
        }
        @else {
          $value-min: $rfs-base-value + (abs($value) - $rfs-base-value) / $rfs-factor;
          $value-diff: abs($value) - $value-min;
          $min-width: if($rfs-unit == rem, #{$value-min / $rfs-rem-value}rem, #{$value-min}px);
          $min-width: if($value < 0, -$min-width, $min-width);
          $variable-unit: if($rfs-two-dimensional, vmin, vw);
          $variable-width: #{$value-diff * 100 / $rfs-breakpoint}#{$variable-unit};
          $val: $val + ' calc(' + $min-width + if($value < 0, ' - ', ' + ') + $variable-width + ')';
        }
      }
    }
  }

  @return unquote(str-slice($val, 2));
}

// RFS mixin
@mixin rfs($values, $property: font-size) {
  @if $values != null {
    $val: rfs-value($values);
    $fluidVal: rfs-fluid-value($values);

    @if $val == $fluidVal {
      #{$property}: $val;
    }
    @else {
      @if $rfs-class {
        @if $rfs-mode == max-media-query {
          &,
          .disable-rfs &,
          &.disable-rfs {
            #{$property}: $val;
          }

          @media (#{$rfs-mq-property-width}: #{$r
