// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($breakpoint-name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $index: index($breakpoint-names, $breakpoint-name);

  // Return an error if the breakpoint name is not found
  @if not $index {
    @error "breakpoint `#{$breakpoint-name}` not found in `#{$breakpoints}`";
  }

  // Return the next breakpoint name or null if it's the last one
  @return if($index < length($breakpoint-names), nth($breakpoint-names, $index + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($breakpoint-name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $breakpoint-name);
  @return if($min != 0, $min, null);
}

// Maximum breakpoint width.
// The maximum value is reduced by 0.02px to work around the limitations of
// `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max($breakpoint-name, $breakpoints: $grid-breakpoints) {
  $max: map-get($breakpoints, $breakpoint-name);
  @return if($max and $max > 0, $max - .02, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($breakpoint-name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($breakpoint-name, $breakpoints) == null, "", "-#{$breakpoint-name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
//
//    >> media-breakpoint-up(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    @media (min-width: 576px) {
//      // CSS rules for the sm breakpoint and wider
//    }
@mixin media-breakpoint-up($breakpoint-name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($breakpoint-name, $breakpoints);

  // If the breakpoint is not found, apply the CSS rules to all viewport sizes
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
//
//    >> media-breakpoint-down(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    @media (max-width: 767.98px) {
//      // CSS rules for the md breakpoint and narrower
//    }
@mixin media-breakpoint-down($breakpoint-name, $breakpoints: $grid-
